snippet header 
" File: ${1:`expand('%:t')`}
" Author: ${2:`g:snips_author`}
" Description: ${3}
${0:" Last Modified: `strftime("%B %d, %Y")`}
endsnippet
snippet guard 
if exists('${1:did_`vim_snippets#Filename()`}') || &cp${2: || version < 700}
	finish
endif
let $1 = 1${0}
endsnippet
snippet f 
fun! ${1:`expand('%') =~ 'autoload' ? substitute(matchstr(expand('%:p'),'autoload/\zs.*\ze.vim'),'[/\\]','#','g').'#' : ''`}${2:function_name}(${3})
	${0}
endf
endsnippet
snippet t 
try
	${1:${VISUAL}}
catch ${2}
	${0}
endtry
endsnippet
snippet for 
for ${1} in ${2}
	${0:${VISUAL}}
endfor
endsnippet
snippet forkv 
for [${1},${2}] in items(${3})
	${0}
	unlet $1 $2
endfor
endsnippet
snippet wh 
while ${1}
	${0:${VISUAL}}
endw
endsnippet
snippet if 
if ${1}
	${0:${VISUAL}}
endif
endsnippet
snippet ife 
if ${1}
	${2:${VISUAL}}
else
	${0}
endif
endsnippet
snippet au 
augroup ${1:AU_NAME}
	autocmd!
	autocmd ${2:BufRead,BufNewFile} ${3:*.ext,*.ext3|<buffer[=N]>} ${0}
augroup END
endsnippet
snippet auv 
augroup ${1:AU_NAME}
	autocmd!
	${0:${VISUAL}}
augroup END
endsnippet
snippet plug 
Plug '${0}'
endsnippet
snippet plugdo 
Plug '${1}', { 'do': '${0}' }
endsnippet
snippet plugon 
Plug '${1}', { 'on': '${0}' }
endsnippet
snippet plugfor 
Plug '${1}', { 'for': '${0}' }
endsnippet
snippet plugbr 
Plug '${1}', { 'branch': '${0}' }
endsnippet
snippet plugtag 
Plug '${1}', { 'tag': '${0}' }
endsnippet
snippet let
let ${1:variable} = ${0: value}
endsnippet
snippet se
set ${1:setting};
endsnippet
snippet set
set ${1:setting} = ${0:value}
endsnippet
snippet nn
nnoremap ${1} ${2}<CR>
endsnippet
snippet no
noremap ${1} ${2}
endsnippet
snippet vm
vmap ${1} ${2}
endsnippet
snippet im
imap ${1} ${2}
endsnippet
snippet exe
execute ${1}
endsnippet
snippet filename
`Filename()`
endsnippet
